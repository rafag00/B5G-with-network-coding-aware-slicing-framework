# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Link(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sw_id_src: str=None, sw_id_dst: str=None, port_numb_src: int=None, port_numb_dst: int=None, bandwith: float=None, latency: float=None, jitter: float=None, loss_prob: float=None, energy_consumption: float=None):  # noqa: E501
        """Link - a model defined in Swagger

        :param sw_id_src: The sw_id_src of this Link.  # noqa: E501
        :type sw_id_src: str
        :param sw_id_dst: The sw_id_dst of this Link.  # noqa: E501
        :type sw_id_dst: str
        :param port_numb_src: The port_numb_src of this Link.  # noqa: E501
        :type port_numb_src: int
        :param port_numb_dst: The port_numb_dst of this Link.  # noqa: E501
        :type port_numb_dst: int
        :param bandwith: The bandwith of this Link.  # noqa: E501
        :type bandwith: float
        :param latency: The latency of this Link.  # noqa: E501
        :type latency: float
        :param jitter: The jitter of this Link.  # noqa: E501
        :type jitter: float
        :param loss_prob: The loss_prob of this Link.  # noqa: E501
        :type loss_prob: float
        :param energy_consumption: The energy_consumption of this Link.  # noqa: E501
        :type energy_consumption: float
        """
        self.swagger_types = {
            'sw_id_src': str,
            'sw_id_dst': str,
            'port_numb_src': int,
            'port_numb_dst': int,
            'bandwith': float,
            'latency': float,
            'jitter': float,
            'loss_prob': float,
            'energy_consumption': float
        }

        self.attribute_map = {
            'sw_id_src': 'sw_id_src',
            'sw_id_dst': 'sw_id_dst',
            'port_numb_src': 'port_numb_src',
            'port_numb_dst': 'port_numb_dst',
            'bandwith': 'bandwith',
            'latency': 'latency',
            'jitter': 'jitter',
            'loss_prob': 'loss_prob',
            'energy_consumption': 'energy_consumption'
        }
        self._sw_id_src = sw_id_src
        self._sw_id_dst = sw_id_dst
        self._port_numb_src = port_numb_src
        self._port_numb_dst = port_numb_dst
        self._bandwith = bandwith
        self._latency = latency
        self._jitter = jitter
        self._loss_prob = loss_prob
        self._energy_consumption = energy_consumption

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sw_id_src(self) -> str:
        """Gets the sw_id_src of this Link.

        Id of the switch  # noqa: E501

        :return: The sw_id_src of this Link.
        :rtype: str
        """
        return self._sw_id_src

    @sw_id_src.setter
    def sw_id_src(self, sw_id_src: str):
        """Sets the sw_id_src of this Link.

        Id of the switch  # noqa: E501

        :param sw_id_src: The sw_id_src of this Link.
        :type sw_id_src: str
        """
        if sw_id_src is None:
            raise ValueError("Invalid value for `sw_id_src`, must not be `None`")  # noqa: E501

        self._sw_id_src = sw_id_src

    @property
    def sw_id_dst(self) -> str:
        """Gets the sw_id_dst of this Link.

        Id of the switch  # noqa: E501

        :return: The sw_id_dst of this Link.
        :rtype: str
        """
        return self._sw_id_dst

    @sw_id_dst.setter
    def sw_id_dst(self, sw_id_dst: str):
        """Sets the sw_id_dst of this Link.

        Id of the switch  # noqa: E501

        :param sw_id_dst: The sw_id_dst of this Link.
        :type sw_id_dst: str
        """
        if sw_id_dst is None:
            raise ValueError("Invalid value for `sw_id_dst`, must not be `None`")  # noqa: E501

        self._sw_id_dst = sw_id_dst

    @property
    def port_numb_src(self) -> int:
        """Gets the port_numb_src of this Link.

        Connected port that belongs to sw_id_src  # noqa: E501

        :return: The port_numb_src of this Link.
        :rtype: int
        """
        return self._port_numb_src

    @port_numb_src.setter
    def port_numb_src(self, port_numb_src: int):
        """Sets the port_numb_src of this Link.

        Connected port that belongs to sw_id_src  # noqa: E501

        :param port_numb_src: The port_numb_src of this Link.
        :type port_numb_src: int
        """
        if port_numb_src is None:
            raise ValueError("Invalid value for `port_numb_src`, must not be `None`")  # noqa: E501

        self._port_numb_src = port_numb_src

    @property
    def port_numb_dst(self) -> int:
        """Gets the port_numb_dst of this Link.

        Connected port that belongs to sw_id_dst  # noqa: E501

        :return: The port_numb_dst of this Link.
        :rtype: int
        """
        return self._port_numb_dst

    @port_numb_dst.setter
    def port_numb_dst(self, port_numb_dst: int):
        """Sets the port_numb_dst of this Link.

        Connected port that belongs to sw_id_dst  # noqa: E501

        :param port_numb_dst: The port_numb_dst of this Link.
        :type port_numb_dst: int
        """
        if port_numb_dst is None:
            raise ValueError("Invalid value for `port_numb_dst`, must not be `None`")  # noqa: E501

        self._port_numb_dst = port_numb_dst

    @property
    def bandwith(self) -> float:
        """Gets the bandwith of this Link.

        Bandwith of the link in bps  # noqa: E501

        :return: The bandwith of this Link.
        :rtype: float
        """
        return self._bandwith

    @bandwith.setter
    def bandwith(self, bandwith: float):
        """Sets the bandwith of this Link.

        Bandwith of the link in bps  # noqa: E501

        :param bandwith: The bandwith of this Link.
        :type bandwith: float
        """
        if bandwith is None:
            raise ValueError("Invalid value for `bandwith`, must not be `None`")  # noqa: E501

        self._bandwith = bandwith

    @property
    def latency(self) -> float:
        """Gets the latency of this Link.

        Latency of the link in milliseconds  # noqa: E501

        :return: The latency of this Link.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency: float):
        """Sets the latency of this Link.

        Latency of the link in milliseconds  # noqa: E501

        :param latency: The latency of this Link.
        :type latency: float
        """
        if latency is None:
            raise ValueError("Invalid value for `latency`, must not be `None`")  # noqa: E501

        self._latency = latency

    @property
    def jitter(self) -> float:
        """Gets the jitter of this Link.

        Jitter in the link in milliseconds  # noqa: E501

        :return: The jitter of this Link.
        :rtype: float
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter: float):
        """Sets the jitter of this Link.

        Jitter in the link in milliseconds  # noqa: E501

        :param jitter: The jitter of this Link.
        :type jitter: float
        """
        if jitter is None:
            raise ValueError("Invalid value for `jitter`, must not be `None`")  # noqa: E501

        self._jitter = jitter

    @property
    def loss_prob(self) -> float:
        """Gets the loss_prob of this Link.

        Percentage of packet loss in the link  # noqa: E501

        :return: The loss_prob of this Link.
        :rtype: float
        """
        return self._loss_prob

    @loss_prob.setter
    def loss_prob(self, loss_prob: float):
        """Sets the loss_prob of this Link.

        Percentage of packet loss in the link  # noqa: E501

        :param loss_prob: The loss_prob of this Link.
        :type loss_prob: float
        """
        if loss_prob is None:
            raise ValueError("Invalid value for `loss_prob`, must not be `None`")  # noqa: E501

        self._loss_prob = loss_prob

    @property
    def energy_consumption(self) -> float:
        """Gets the energy_consumption of this Link.

        Estimated energy consumption when using the link in Watts  # noqa: E501

        :return: The energy_consumption of this Link.
        :rtype: float
        """
        return self._energy_consumption

    @energy_consumption.setter
    def energy_consumption(self, energy_consumption: float):
        """Sets the energy_consumption of this Link.

        Estimated energy consumption when using the link in Watts  # noqa: E501

        :param energy_consumption: The energy_consumption of this Link.
        :type energy_consumption: float
        """
        if energy_consumption is None:
            raise ValueError("Invalid value for `energy_consumption`, must not be `None`")  # noqa: E501

        self._energy_consumption = energy_consumption
