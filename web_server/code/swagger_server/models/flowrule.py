# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Flowrule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, state: str=None, bytes: int=None, packets: int=None, duration_treatment: int=None, priority: int=None, table_name: str=None, app_id: int=None, group_id: int=None, timeout: int=None, hard_timeout: int=None, permanent: bool=None, selector: str=None, treatment: str=None, device_uri: str=None):  # noqa: E501
        """Flowrule - a model defined in Swagger

        :param id: The id of this Flowrule.  # noqa: E501
        :type id: str
        :param state: The state of this Flowrule.  # noqa: E501
        :type state: str
        :param bytes: The bytes of this Flowrule.  # noqa: E501
        :type bytes: int
        :param packets: The packets of this Flowrule.  # noqa: E501
        :type packets: int
        :param duration_treatment: The duration_treatment of this Flowrule.  # noqa: E501
        :type duration_treatment: int
        :param priority: The priority of this Flowrule.  # noqa: E501
        :type priority: int
        :param table_name: The table_name of this Flowrule.  # noqa: E501
        :type table_name: str
        :param app_id: The app_id of this Flowrule.  # noqa: E501
        :type app_id: int
        :param group_id: The group_id of this Flowrule.  # noqa: E501
        :type group_id: int
        :param timeout: The timeout of this Flowrule.  # noqa: E501
        :type timeout: int
        :param hard_timeout: The hard_timeout of this Flowrule.  # noqa: E501
        :type hard_timeout: int
        :param permanent: The permanent of this Flowrule.  # noqa: E501
        :type permanent: bool
        :param selector: The selector of this Flowrule.  # noqa: E501
        :type selector: str
        :param treatment: The treatment of this Flowrule.  # noqa: E501
        :type treatment: str
        :param device_uri: The device_uri of this Flowrule.  # noqa: E501
        :type device_uri: str
        """
        self.swagger_types = {
            'id': str,
            'state': str,
            'bytes': int,
            'packets': int,
            'duration_treatment': int,
            'priority': int,
            'table_name': str,
            'app_id': int,
            'group_id': int,
            'timeout': int,
            'hard_timeout': int,
            'permanent': bool,
            'selector': str,
            'treatment': str,
            'device_uri': str
        }

        self.attribute_map = {
            'id': 'id',
            'state': 'state',
            'bytes': 'bytes',
            'packets': 'packets',
            'duration_treatment': 'duration_treatment',
            'priority': 'priority',
            'table_name': 'table_name',
            'app_id': 'app_id',
            'group_id': 'group_id',
            'timeout': 'timeout',
            'hard_timeout': 'hard_timeout',
            'permanent': 'permanent',
            'selector': 'selector',
            'treatment': 'treatment',
            'device_uri': 'device_uri'
        }
        self._id = id
        self._state = state
        self._bytes = bytes
        self._packets = packets
        self._duration_treatment = duration_treatment
        self._priority = priority
        self._table_name = table_name
        self._app_id = app_id
        self._group_id = group_id
        self._timeout = timeout
        self._hard_timeout = hard_timeout
        self._permanent = permanent
        self._selector = selector
        self._treatment = treatment
        self._device_uri = device_uri

    @classmethod
    def from_dict(cls, dikt) -> 'Flowrule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Flowrule of this Flowrule.  # noqa: E501
        :rtype: Flowrule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Flowrule.

        Id of this flow  # noqa: E501

        :return: The id of this Flowrule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Flowrule.

        Id of this flow  # noqa: E501

        :param id: The id of this Flowrule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self) -> str:
        """Gets the state of this Flowrule.

        The flow entry state  # noqa: E501

        :return: The state of this Flowrule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Flowrule.

        The flow entry state  # noqa: E501

        :param state: The state of this Flowrule.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def bytes(self) -> int:
        """Gets the bytes of this Flowrule.

        Number of bytes this flow rule has matched  # noqa: E501

        :return: The bytes of this Flowrule.
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes: int):
        """Sets the bytes of this Flowrule.

        Number of bytes this flow rule has matched  # noqa: E501

        :param bytes: The bytes of this Flowrule.
        :type bytes: int
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501

        self._bytes = bytes

    @property
    def packets(self) -> int:
        """Gets the packets of this Flowrule.

        Number of packets this flow rule has matched  # noqa: E501

        :return: The packets of this Flowrule.
        :rtype: int
        """
        return self._packets

    @packets.setter
    def packets(self, packets: int):
        """Sets the packets of this Flowrule.

        Number of packets this flow rule has matched  # noqa: E501

        :param packets: The packets of this Flowrule.
        :type packets: int
        """
        if packets is None:
            raise ValueError("Invalid value for `packets`, must not be `None`")  # noqa: E501

        self._packets = packets

    @property
    def duration_treatment(self) -> int:
        """Gets the duration_treatment of this Flowrule.

        Number of seconds this flow rule has been applied  # noqa: E501

        :return: The duration_treatment of this Flowrule.
        :rtype: int
        """
        return self._duration_treatment

    @duration_treatment.setter
    def duration_treatment(self, duration_treatment: int):
        """Sets the duration_treatment of this Flowrule.

        Number of seconds this flow rule has been applied  # noqa: E501

        :param duration_treatment: The duration_treatment of this Flowrule.
        :type duration_treatment: int
        """
        if duration_treatment is None:
            raise ValueError("Invalid value for `duration_treatment`, must not be `None`")  # noqa: E501

        self._duration_treatment = duration_treatment

    @property
    def priority(self) -> int:
        """Gets the priority of this Flowrule.

        Flow rule priority given in natural order (Higher numbers mean higher priorities)  # noqa: E501

        :return: The priority of this Flowrule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this Flowrule.

        Flow rule priority given in natural order (Higher numbers mean higher priorities)  # noqa: E501

        :param priority: The priority of this Flowrule.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def table_name(self) -> str:
        """Gets the table_name of this Flowrule.

        The table identifier for this rule  # noqa: E501

        :return: The table_name of this Flowrule.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name: str):
        """Sets the table_name of this Flowrule.

        The table identifier for this rule  # noqa: E501

        :param table_name: The table_name of this Flowrule.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def app_id(self) -> int:
        """Gets the app_id of this Flowrule.

        The application id of this flow  # noqa: E501

        :return: The app_id of this Flowrule.
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: int):
        """Sets the app_id of this Flowrule.

        The application id of this flow  # noqa: E501

        :param app_id: The app_id of this Flowrule.
        :type app_id: int
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def group_id(self) -> int:
        """Gets the group_id of this Flowrule.

        The group id of this flow  # noqa: E501

        :return: The group_id of this Flowrule.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this Flowrule.

        The group id of this flow  # noqa: E501

        :param group_id: The group_id of this Flowrule.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def timeout(self) -> int:
        """Gets the timeout of this Flowrule.

        The timeout for this flow requested by an application  # noqa: E501

        :return: The timeout of this Flowrule.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout: int):
        """Sets the timeout of this Flowrule.

        The timeout for this flow requested by an application  # noqa: E501

        :param timeout: The timeout of this Flowrule.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    @property
    def hard_timeout(self) -> int:
        """Gets the hard_timeout of this Flowrule.

        The hard timeout for this flow requested by an application. This parameter configure switch's flow hard timeout. In case of controller-switch connection lost, this variable can be useful  # noqa: E501

        :return: The hard_timeout of this Flowrule.
        :rtype: int
        """
        return self._hard_timeout

    @hard_timeout.setter
    def hard_timeout(self, hard_timeout: int):
        """Sets the hard_timeout of this Flowrule.

        The hard timeout for this flow requested by an application. This parameter configure switch's flow hard timeout. In case of controller-switch connection lost, this variable can be useful  # noqa: E501

        :param hard_timeout: The hard_timeout of this Flowrule.
        :type hard_timeout: int
        """
        if hard_timeout is None:
            raise ValueError("Invalid value for `hard_timeout`, must not be `None`")  # noqa: E501

        self._hard_timeout = hard_timeout

    @property
    def permanent(self) -> bool:
        """Gets the permanent of this Flowrule.

        Whether the flow is permanent (does not time out)  # noqa: E501

        :return: The permanent of this Flowrule.
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent: bool):
        """Sets the permanent of this Flowrule.

        Whether the flow is permanent (does not time out)  # noqa: E501

        :param permanent: The permanent of this Flowrule.
        :type permanent: bool
        """
        if permanent is None:
            raise ValueError("Invalid value for `permanent`, must not be `None`")  # noqa: E501

        self._permanent = permanent

    @property
    def selector(self) -> str:
        """Gets the selector of this Flowrule.

        The traffic selector that identifies what traffic this rule should apply to  # noqa: E501

        :return: The selector of this Flowrule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector: str):
        """Sets the selector of this Flowrule.

        The traffic selector that identifies what traffic this rule should apply to  # noqa: E501

        :param selector: The selector of this Flowrule.
        :type selector: str
        """
        if selector is None:
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    @property
    def treatment(self) -> str:
        """Gets the treatment of this Flowrule.

        The traffic treatment that applies to selected traffic  # noqa: E501

        :return: The treatment of this Flowrule.
        :rtype: str
        """
        return self._treatment

    @treatment.setter
    def treatment(self, treatment: str):
        """Sets the treatment of this Flowrule.

        The traffic treatment that applies to selected traffic  # noqa: E501

        :param treatment: The treatment of this Flowrule.
        :type treatment: str
        """
        if treatment is None:
            raise ValueError("Invalid value for `treatment`, must not be `None`")  # noqa: E501

        self._treatment = treatment

    @property
    def device_uri(self) -> str:
        """Gets the device_uri of this Flowrule.

        The identity of the device where this rule applies  # noqa: E501

        :return: The device_uri of this Flowrule.
        :rtype: str
        """
        return self._device_uri

    @device_uri.setter
    def device_uri(self, device_uri: str):
        """Sets the device_uri of this Flowrule.

        The identity of the device where this rule applies  # noqa: E501

        :param device_uri: The device_uri of this Flowrule.
        :type device_uri: str
        """
        if device_uri is None:
            raise ValueError("Invalid value for `device_uri`, must not be `None`")  # noqa: E501

        self._device_uri = device_uri
